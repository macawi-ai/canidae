// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/howl/v1/canidae.proto

package howlv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CanidaeService_Execute_FullMethodName    = "/howl.v1.CanidaeService/Execute"
	CanidaeService_Chain_FullMethodName      = "/howl.v1.CanidaeService/Chain"
	CanidaeService_SummonPack_FullMethodName = "/howl.v1.CanidaeService/SummonPack"
	CanidaeService_Stream_FullMethodName     = "/howl.v1.CanidaeService/Stream"
)

// CanidaeServiceClient is the client API for CanidaeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CanidaeService extends PackService with SDK-specific operations
type CanidaeServiceClient interface {
	// Execute runs a single agent
	Execute(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Chain runs multiple agents in sequence
	Chain(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// SummonPack creates a pack formation for parallel processing
	SummonPack(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Stream enables bidirectional streaming
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMessage, StreamMessage], error)
}

type canidaeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCanidaeServiceClient(cc grpc.ClientConnInterface) CanidaeServiceClient {
	return &canidaeServiceClient{cc}
}

func (c *canidaeServiceClient) Execute(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CanidaeService_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canidaeServiceClient) Chain(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CanidaeService_Chain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canidaeServiceClient) SummonPack(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CanidaeService_SummonPack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canidaeServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMessage, StreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CanidaeService_ServiceDesc.Streams[0], CanidaeService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMessage, StreamMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CanidaeService_StreamClient = grpc.BidiStreamingClient[StreamMessage, StreamMessage]

// CanidaeServiceServer is the server API for CanidaeService service.
// All implementations must embed UnimplementedCanidaeServiceServer
// for forward compatibility.
//
// CanidaeService extends PackService with SDK-specific operations
type CanidaeServiceServer interface {
	// Execute runs a single agent
	Execute(context.Context, *Request) (*Response, error)
	// Chain runs multiple agents in sequence
	Chain(context.Context, *Request) (*Response, error)
	// SummonPack creates a pack formation for parallel processing
	SummonPack(context.Context, *Request) (*Response, error)
	// Stream enables bidirectional streaming
	Stream(grpc.BidiStreamingServer[StreamMessage, StreamMessage]) error
	mustEmbedUnimplementedCanidaeServiceServer()
}

// UnimplementedCanidaeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCanidaeServiceServer struct{}

func (UnimplementedCanidaeServiceServer) Execute(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedCanidaeServiceServer) Chain(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chain not implemented")
}
func (UnimplementedCanidaeServiceServer) SummonPack(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SummonPack not implemented")
}
func (UnimplementedCanidaeServiceServer) Stream(grpc.BidiStreamingServer[StreamMessage, StreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedCanidaeServiceServer) mustEmbedUnimplementedCanidaeServiceServer() {}
func (UnimplementedCanidaeServiceServer) testEmbeddedByValue()                        {}

// UnsafeCanidaeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CanidaeServiceServer will
// result in compilation errors.
type UnsafeCanidaeServiceServer interface {
	mustEmbedUnimplementedCanidaeServiceServer()
}

func RegisterCanidaeServiceServer(s grpc.ServiceRegistrar, srv CanidaeServiceServer) {
	// If the following call pancis, it indicates UnimplementedCanidaeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CanidaeService_ServiceDesc, srv)
}

func _CanidaeService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanidaeServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CanidaeService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanidaeServiceServer).Execute(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CanidaeService_Chain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanidaeServiceServer).Chain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CanidaeService_Chain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanidaeServiceServer).Chain(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CanidaeService_SummonPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanidaeServiceServer).SummonPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CanidaeService_SummonPack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanidaeServiceServer).SummonPack(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CanidaeService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CanidaeServiceServer).Stream(&grpc.GenericServerStream[StreamMessage, StreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CanidaeService_StreamServer = grpc.BidiStreamingServer[StreamMessage, StreamMessage]

// CanidaeService_ServiceDesc is the grpc.ServiceDesc for CanidaeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CanidaeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "howl.v1.CanidaeService",
	HandlerType: (*CanidaeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _CanidaeService_Execute_Handler,
		},
		{
			MethodName: "Chain",
			Handler:    _CanidaeService_Chain_Handler,
		},
		{
			MethodName: "SummonPack",
			Handler:    _CanidaeService_SummonPack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _CanidaeService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/howl/v1/canidae.proto",
}
