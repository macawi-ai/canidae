// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/howl/v1/howl.proto

package howlv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PackService_Summon_FullMethodName = "/howl.v1.PackService/Summon"
	PackService_Track_FullMethodName  = "/howl.v1.PackService/Track"
	PackService_Circle_FullMethodName = "/howl.v1.PackService/Circle"
	PackService_Howl_FullMethodName   = "/howl.v1.PackService/Howl"
)

// PackServiceClient is the client API for PackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackServiceClient interface {
	// Summon initiates a new AI agent request
	Summon(ctx context.Context, in *SummonRequest, opts ...grpc.CallOption) (*SummonResponse, error)
	// Track monitors the status of a request
	Track(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TrackResponse], error)
	// Circle enables multi-agent collaboration
	Circle(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CircleRequest, CircleResponse], error)
	// Howl broadcasts messages to the pack
	Howl(ctx context.Context, in *HowlRequest, opts ...grpc.CallOption) (*HowlResponse, error)
}

type packServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackServiceClient(cc grpc.ClientConnInterface) PackServiceClient {
	return &packServiceClient{cc}
}

func (c *packServiceClient) Summon(ctx context.Context, in *SummonRequest, opts ...grpc.CallOption) (*SummonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummonResponse)
	err := c.cc.Invoke(ctx, PackService_Summon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packServiceClient) Track(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TrackResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PackService_ServiceDesc.Streams[0], PackService_Track_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TrackRequest, TrackResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PackService_TrackClient = grpc.ServerStreamingClient[TrackResponse]

func (c *packServiceClient) Circle(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CircleRequest, CircleResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PackService_ServiceDesc.Streams[1], PackService_Circle_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CircleRequest, CircleResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PackService_CircleClient = grpc.BidiStreamingClient[CircleRequest, CircleResponse]

func (c *packServiceClient) Howl(ctx context.Context, in *HowlRequest, opts ...grpc.CallOption) (*HowlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HowlResponse)
	err := c.cc.Invoke(ctx, PackService_Howl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackServiceServer is the server API for PackService service.
// All implementations must embed UnimplementedPackServiceServer
// for forward compatibility.
type PackServiceServer interface {
	// Summon initiates a new AI agent request
	Summon(context.Context, *SummonRequest) (*SummonResponse, error)
	// Track monitors the status of a request
	Track(*TrackRequest, grpc.ServerStreamingServer[TrackResponse]) error
	// Circle enables multi-agent collaboration
	Circle(grpc.BidiStreamingServer[CircleRequest, CircleResponse]) error
	// Howl broadcasts messages to the pack
	Howl(context.Context, *HowlRequest) (*HowlResponse, error)
	mustEmbedUnimplementedPackServiceServer()
}

// UnimplementedPackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPackServiceServer struct{}

func (UnimplementedPackServiceServer) Summon(context.Context, *SummonRequest) (*SummonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summon not implemented")
}
func (UnimplementedPackServiceServer) Track(*TrackRequest, grpc.ServerStreamingServer[TrackResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Track not implemented")
}
func (UnimplementedPackServiceServer) Circle(grpc.BidiStreamingServer[CircleRequest, CircleResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Circle not implemented")
}
func (UnimplementedPackServiceServer) Howl(context.Context, *HowlRequest) (*HowlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Howl not implemented")
}
func (UnimplementedPackServiceServer) mustEmbedUnimplementedPackServiceServer() {}
func (UnimplementedPackServiceServer) testEmbeddedByValue()                     {}

// UnsafePackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackServiceServer will
// result in compilation errors.
type UnsafePackServiceServer interface {
	mustEmbedUnimplementedPackServiceServer()
}

func RegisterPackServiceServer(s grpc.ServiceRegistrar, srv PackServiceServer) {
	// If the following call pancis, it indicates UnimplementedPackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PackService_ServiceDesc, srv)
}

func _PackService_Summon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackServiceServer).Summon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackService_Summon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackServiceServer).Summon(ctx, req.(*SummonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackService_Track_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PackServiceServer).Track(m, &grpc.GenericServerStream[TrackRequest, TrackResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PackService_TrackServer = grpc.ServerStreamingServer[TrackResponse]

func _PackService_Circle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PackServiceServer).Circle(&grpc.GenericServerStream[CircleRequest, CircleResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PackService_CircleServer = grpc.BidiStreamingServer[CircleRequest, CircleResponse]

func _PackService_Howl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HowlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackServiceServer).Howl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackService_Howl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackServiceServer).Howl(ctx, req.(*HowlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackService_ServiceDesc is the grpc.ServiceDesc for PackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "howl.v1.PackService",
	HandlerType: (*PackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Summon",
			Handler:    _PackService_Summon_Handler,
		},
		{
			MethodName: "Howl",
			Handler:    _PackService_Howl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Track",
			Handler:       _PackService_Track_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Circle",
			Handler:       _PackService_Circle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/howl/v1/howl.proto",
}
